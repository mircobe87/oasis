#!/bin/bash
# OASIS: Oasis is an Assembler of Self-Installing Script

SCRIPT_NAME="oasis"
SCRIPT_VERSION="1.0"
SCRIPT_AUTHORS="Mirco Bertelli"

bold="\e[1m"
norm="\e[0m"
uline="\e[4m"

command="${0##*/}"

function help() {
	echo -e "${bold}USO${norm}:"
	echo -e "    ${bold}${command}${norm} [-h | -v] [ -f ${uline}oasisfile${norm} ]"
	echo -e ""
	echo -e "OASIS: Oasis is an Assembler of Self-Installing Script"
	echo -e "Permette di creare uno script auto-installante."
	echo -e ""
	echo -e "${bold}OPZIONI${norm}:"
	echo -e "    ${bold}-f${norm} ${uline}cmd${norm} | ${bold}--oasis-file${norm} ${uline}oasisfile${norm}"
	echo -e "        permette di specificare un file di configurazione diverso da quello di"
	echo -e "        di default (${bold}OASISfile${norm}). Vedi la sezione ${bold}FILES${norm} per la sintassi da usare"
	echo -e "        in un file di configurazione OASIS."
	echo -e ""
	echo -e "    ${bold}-h${norm} | ${bold}--help${norm}"
	echo -e "        mostra questa guida utente."
	echo -e ""
	echo -e "    ${bold}-v${norm} | ${bold}--version${norm}"
	echo -e "        mostra le informazioni sulla versione del programma."
	echo -e ""
	echo -e "${bold}FILES${norm}:"
	echo -e "    ${bold}OASISfile${norm}"
	echo -e "        File di configurazione specifico per ogni progetto da creare nella"
	echo -e "        directory dove risiedono i file sorgenti."
	echo -e ""
	echo -e "        Permette di specificare il nome del programma per il quale si vuole"
	echo -e "        creare il setup, l'elenco dei file che dovranno essere installati e le"
	echo -e "        relative locazioni."
	echo -e ""
	echo -e "        La sintassi permette di inserire i commenti in stile bash."
	echo -e ""
	echo -e "        Esclusi i commenti, la prima riga deve esprimere il nome del programma;"
	echo -e "        per esempio se scriviamo ${bold}foo${norm} verra' creato un setup di nome ${bold}foo.setup${norm}"
	echo -e ""
	echo -e "        Le successive linee verranno interpretate a coppie di 2:"
	echo -e "         - la prima contiene il del file che si vuole installare;"
	echo -e "         - la seconda contiene il path di destinazione del file suddetto."
	echo -e ""
	echo -e "        Linee vuote o contenete commenti in stile bash verranno ignorate così"
	echo -e "        come tutti gli spazi e tabulazioni in testa ad ogni linea."
	echo -e ""
	echo -e "    ${bold}installer-code${norm}"
	echo -e "        Contiene il codice eseguibile che permette l'auto-installazione, codice"
	echo -e "        che viene inserito nel setup per permetterne l'esecuzione."
	echo -e ""
	echo -e "        Le modifiche a tale file sono sconsigliate."
	echo -e ""
}

function version(){
	echo $SCRIPT_NAME $SCRIPT_VERSION
	echo "OASIS: Oasis is an Assembler of Self-Installing Script"
	echo "Scritto da $SCRIPT_AUTHORS"
}

# ritrona true se la stringa passata è un commento BASH,
# false altrimenti.
# NOTA: un commento BASH inizia con la sequenza "#" e termina con un newline.
function is_bash_comment() {
	for tmp in $1; do
		if [ "${tmp:0:1}" = "#" ]; then
			return 0
		else
			return 1
		fi
	done
	return 1
}

function make_header() {
	echo ""
	echo "#@ BEGIN $1"
	echo "#@ PUT   $2"
	echo "#@ CODE"
	echo ""
}

function make_footer() {
	echo ""
	echo "#@ END"
	echo ""
}

function init_installer() {
	#cat "installer-code"
	tail -n $(( 475 - 188 + 1 )) "$0"
}

#echo "$( pwd )"
#exit 0

conf_file="OASISfile"

TEMP=$( getopt -o f:hv --long oasis-file:,help,version -n "$0" -- "$@" )

if [ $? != 0 ] ; then exit 1 ; fi

eval set -- "$TEMP"

while true; do
	case "$1" in
		-f|--oasis-file)
			if ! [ -f "$2" ]; then
				echo "$0: file non regolare o inesistente -- $2" >&2
				exit 1
			fi
			conf_file="$2"
			shift 2
			;;
		-h|--help)
			help
			exit 0
			;;
		-v|--version)
			version
			exit 0
			;;
		--) shift ; break ;;
		*) echo "Internal error!" ; exit 1 ;;
	esac
done

if ! [ -z "$@" ]; then
	echo -n "$0: parametri inattesi --" >&2
	for opt in $@; do
		echo -n " $opt" >&2
	done
	echo "" >&2
	exit 1
fi

exec 5<&0 #faccio una copia di stdin
exec 0<"$conf_file" #apro il file di conf in letture sul descrittore 0

file_name=""
file_path=""
script_name=""
setup_name=""
stato="find_script_name"

while [ "$stato" = "create" ] || read line; do
	if ! [ -z "$line" ]; then
		if ! is_bash_comment "$line"; then
			if [ "$stato" = "find_script_name" ]; then
				script_name="$line"
				setup_name="$script_name.installer"
				init_installer >> "$setup_name"
				stato="find_name"
			elif [ "$stato" = "find_name" ]; then
				file_name="$line"
				stato="find_path"
			elif [ "$stato" = "find_path" ]; then
				file_path="$line"
				stato="create"
			elif [ "$stato" = "create" ]; then
				make_header "$file_name" "$file_path" >> "$setup_name"
				cat "$file_name" >> "$setup_name"
				make_footer >> "$setup_name"
				file_path=""
				file_name=""
				stato="find_name"
			fi
		fi
	fi
done

exec 0<&-
exec 0<&5
exec 5<&-

chmod 555 "$setup_name"

exit 0

# ----------------------- oasis installer-code ---------------------------------
#!/bin/bash

# ritorna true se la stringa passata ha il formato:
#     #@ BEGINE nome_file
# in questo caso stampa la stringa "nome_file"
# altrimenti ritrona false e stampa la stringa vuota.
# NOTA: prima e dopo BEGIN è necessario almeno uno spazio.
function is_begin() {
	local flag=""
	for tmp in $1; do
		if [ -z "$flag" ]; then
			if [ "$tmp" == "BEGIN" ]; then
				flag="1"
			fi
		else
			echo "${tmp%% *}"
			return 0
		fi
	done
	echo ""
	return 1
}

# ritorna true se la stringa passata ha il formato:
#     #@ PUT nome_file
# in questo caso stampa la stringa "nome_file"
# altrimenti ritrona false e stampa la stringa vuota.
# NOTA: prima e dopo PUT è necessario almeno uno spazio.
function is_put() {
	local flag=""
	for tmp in $1; do
		if [ -z "$flag" ]; then
			if [ "$tmp" == "PUT" ]; then
				flag="1"
			fi
		else
			echo "${tmp%% *}"
			return 0
		fi
	done
	echo ""
	return 1
}

# ritorna true se la stringa passata ha il formato:
#     #@ CODE
# altrimenti ritrona false.
# NOTA: prima di CODE è necessario almeno uno spazio.
function is_code() {
	local flag=""
	for tmp in $1; do
		if [ -z "$flag" ]; then
			if [ "$tmp" == "#@" ]; then
				flag="1"
			fi
		else
			if [ "$tmp" = "CODE" ]; then
				return 0
			else
				return 1
			fi
		fi
	done
	return 1
}

# ritorna true se la stringa passata ha il formato:
#     #@ END
# altrimenti ritrona false.
# NOTA: prima di END è necessario almeno uno spazio.
function is_end() {
	local flag=""
	for tmp in $1; do
		if [ -z "$flag" ]; then
			if [ "$tmp" == "#@" ]; then
				flag="1"
			fi
		else
			if [ "$tmp" = "END" ]; then
				return 0
			else
				return 1
			fi
		fi
	done
	return 1
}

# ritrona true se la stringa passata è un commento MiBe,
# false altrimenti.
# NOTA: un commento MiBe inizia con la sequenza "#@ " e termina con un newline.
function is_mibe_comment() {
	for tmp in $1; do
		if [ "$tmp" = "#@" ]; then
			return 0
		else
			return 1
		fi
	done
	return 1
}

# ritrona true se la stringa passata è un commento BASH,
# false altrimenti.
# NOTA: un commento BASH inizia con la sequenza "#" e termina con un newline.
function is_bash_comment() {
	for tmp in $1; do
		if [ "${tmp:0:1}" = "#" ]; then
			return 0
		else
			return 1
		fi
	done
	return 1
}

function check_root_rights() {
	if [ "$( id -u )" -ne 0 ]; then
		echo "sono necessari i diritti di root per l'installazione" >&2
		echo "installazione annullata" >&2
		exit 1
	fi
}

# se non si hanno i diritti di root l'installazine finisce qui.
check_root_rights

log_file="installed_files.list"
touch "$log_file"

tmp_file=""

file_name=""
file_path=""

state="find_begin"
line_num=0

# legge se stesso riga per riga...
cat "$0" | while true; do
	if [ "$state" != "abort_installation" ]; then
		if ! read -r line; then
			if [ "$state" = "find_begin" ]; then
				# le read è fallita ed o ho completato almeno un blocco BEGIN-END
				# oppure non c'erano blocchi.
				exit 0
			else
				# la read è fallita e non ho concluso almeno un blocco BEGIN-END
				echo -e "line: $line_num -- fine inattesa del file, blocco BEGIN senza END\n  installazione annullata" >&2
				state="abort_installation"
			fi
		else
			line_num=$(( line_num + 1 ))
		fi
	fi
	
	#line_num=$(( line_num + 1 ))
	if [ "$state" = "find_begin" ]; then
		if is_mibe_comment "$line"; then
			if file_name="$( is_begin "$line" )"; then
				state="find_put"
			else
				echo -e "linea: $line_num -- atteso BEGIN\n  installazione annullata" >&2
				state="abort_installation"
			fi
		else
			continue
		fi
	elif [ "$state" = "find_put" ]; then
		if is_mibe_comment "$line"; then
			if file_path="$( is_put "$line" )"; then
				state="find_code"
			else
				echo -e "linea: $line_num -- atteso PUT\n  installazione annullata" >&2
				state="abort_installation"
			fi
		elif is_bash_comment "$line"; then
			continue
		elif [ "${#line}" = "0" ]; then
			continue
		else
			echo -e "linea: $line_num -- atteso PUT o un commento BASH\n  installazione annullata" >&2
			state="abort_installation"
		fi
	elif [ "$state" = "find_code" ]; then
		if is_mibe_comment "$line"; then
			if is_code "$line"; then
				state="find_end"
				tmp_file="$( mktemp script_XXXXX.tmp)"
			else
				echo -e "linea: $line_num -- atteso CODE\n  installazione annullata" >&2
				state="abort_installation"
			fi
		elif is_bash_comment "$line"; then
			continue
		elif [ "${#line}" = "0" ]; then
			continue
		else
			echo -e "linea: $line_num -- atteso CODE o un commento BASH\n  installazione annullata" >&2
			state="abort_installation"
		fi
	elif [ "$state" = "find_end" ]; then
		if is_mibe_comment "$line"; then
			if is_end "$line"; then
				if cp "$tmp_file" "$file_path/$file_name" &> /dev/null; then
					chmod 755 "$file_path/$file_name"
					rm "$tmp_file"
					echo "$file_name instalato in $file_path"
					echo "$file_path/$file_name" >> "$log_file"
					tmp_file=""
					file_name=""
					file_path=""
					state="find_begin"
				else
					echo -e "impossibile spostare $file_name in $file_path\n  installazione annullata" >&2
					state="abort_installation"
				fi
			else
				echo -e "line: $line_num -- atteso END\n  installazione annullata" >&2
				state="abort_installation"
			fi
		else
			echo "$line" >> "$tmp_file"
		fi
	else # abort_installation
		cleaned=""
		garbage=""
		
		echo -e "\nripristino del sistema in corso..." >&2
		
		if ! [ -z "$tmp_file" ]; then
			if ! rm "$tmp_file" &>/dev/null; then
				garbage="$garbage $tmp_file"
				cleaned="1"
			fi
		fi
			
		cat "$log_file" 2>/dev/null | while read file; do
			if ! rm "$file" &>/dev/null; then
				echo -e "$file: impossibile rimuovere" >&2
				garbage="$garbage $file"
				cleaned="1"
			else
				echo -e "$file: rimosso" >&2
			fi
		done
		
		if ! rm "$log_file" &> /dev/null; then
			garbage="$garbage $log_file"
			cleaned="1"
		fi

		echo -e "-------" >&2
		if [ -z "$cleaned" ]; then
			echo -e "sistema ripristinato\n" >&2
		else
			echo -e "impossibile ripristinare il sistema\n" >&2
			echo -e "non è stato possibile rimuovere i seguenti file:" >&2
			for f in $garbage; do
				echo "$f" >&2
			done
		fi
		#sleep 10
		#echo "exit 1"
		exit 1
	fi
done

if [ "$?" -ne 0 ]; then
# il processo figlio è terminato in errore
# quindi l'istallazione è stata annullata e il distema già ripulito
#	echo "il figlio è terminato male"
	exit 1
else
# il figlio è terminato bene e quindi se c'era almeno un file da installare
# ha lasciato il file di log che va eliminato
#	echo "il figlio è terminato bene"
	if [ -f "$log_file" ]; then
		echo -e "installazione completata"
		rm "$log_file"
	else
		echo -e "non è stato trovato nessun file da installare"
	fi
	#echo "exit 0"
	exit 0
fi
# ------------------  fine del codice di installazione -------------------------

